title=A REST API for Tool Settings in multiple formats
mediaType=\
  application/vnd.ims.lti.v2.ToolSettings+json, \
  application/vnd.ims.lti.v2.ToolSettings.simple+json \
  
abstract=\
  This specification defines a REST API for reading and updating Tool Settings.
  
status=IMS Working Draft

methods=GET PUT

introduction=\
  <p>This specification defines a REST API for reading and updating Tool Settings. \n\
  Following common conventions, the API uses a different HTTP verb for each type of operation: \n\
  GET for read and PUT for update. \n\
  <\p> \n\
  <p>In the IMS LTI standard, Tool Settings may be attached to certain resources within the \n\
  Tool Consumer system. In particular, settings may be attached to <code>LtiLink</code>, \n\
  <code>ToolProxyBinding</code>, and <code>ToolProxy</code> resources. Each of these resource types \n\
  is a kind of <code>ToolSettingsContainer</code>.  Through the REST API described in this document, \n\
  a client may request settings from one particular container.  By including the <code>bubble</code> \n\
  query parameter, the client may request that the response contain settings from "higher-level" \n\
  containers as well.  For example, a client may request settings from an <code>LtiLink</code> resource \n\
  and with <code>bubble=all</code>, the client will also receive settings from the learning context \n\
  that contains the link plus settings defined at the system level (within the ToolProxy).

representations.heading=Representations

representations.text=\
  Tool Settings accessed through this REST API are represented by JSON documents in  \n\
  the following formats: \n\
  <div class="mediatype">\n\
    <div><a href="../../../../../../../../mediatype/application/vnd/ims/lti/v2/ToolSettings+json/index.html">application/vnd.ims.lti.v2.ToolSettings+json</a></div> \n\
    <div><a href="../../../../../../../../mediatype/application/vnd/ims/lti/v2/ToolSettings/simple+json/index.html">application/vnd.ims.lti.v2.ToolSettings.simple+json</a></div> \n\
  </div>\n\
  <p>When requesting settings via an HTTP GET request, the client specifies the desired format with the\n\
  <code>Accept</code> header.  When submitting settings via an HTTP PUT request, the client declares the\n\
  format of the supplied JSON document with the <code>Content-Type</code> header.
  
urlTemplates=\
  Implementations of this REST API must offer an endpoint for accessing Tool Settings from each of \n\
  three different types of containers: <code>LtiLink</code>, <code>ToolProxyBinding</code>, and \n\
  <code>ToolProxy</code>.  This specification does not mandate any particular URL \n\
  templates for these endpoints, but the following templates are recommended: \n\
  <PRE style="margin-left: 2em; margin-bottom: 1em">\n\
       {+base}/lti/links/{link_id}/custom \n\
       {+base}/lis/{context_type}/{context_id}/bindings/{vendor_code}/{product_code}/custom \n\
       {+base}/lti/ToolProxy/{tool_proxy_guid}/custom\n\
  </PRE> \n\
  <p>where <code>base</code> is the base URL, and the path parameters are defined as follows:\n\
  <DL class="references"> \n\
    <DT>link_id</DT> \n\
    <DD>The local identifier for an LtiLink.</DD> \n\
    <DT>context_type</DT> \n\
    <DD>The simple name for the context type, e.g. Group, CourseSection, CourseTemplate, etc.</DD>  \n\
    <DT>context_id</DT>  \n\
    <DD>The local identifier for the context</DD>  \n\
    <DT>vendor_code</DT> \n\
    <DD>The vendor code for a ToolProxy that is bound to the learning context</DD> \n\
    <DT>product_code</DT> \n\
    <DD>The product code for a ToolProxy that is bound to the learning context</DD> \n\
    <DT>tool_proxy_guid</DT> \n\
    <DD>The globally unique identifier for a ToolProxy</DD> \n\
  </DL>\n\
  <p>For example, these templates might yield something like the following URL values:\n\
  <PRE style="margin-left: 2em; margin-bottom: 1em">\n\
       https://lms.example.com/lti/links/402854/custom \n\
       https://lms.example.com/lis/CourseSection/9283/bindings/acme.com/assessment-tool/custom \n\
       https://lms.example.com/lti/ToolProxy/e6b6f6cc253a4d23ad57defbbd2a8e37/custom \n\
  </PRE> \n\
  <p>The first URL provides access to tool settings scoped to a particular LtiLink. \n\
  The second URL provides access to tool settings scoped to a particular learning context. \n\
  The third URL provides access to system wide tool settings.\n\
  </p>\n\
  <p>A Tool Consumer that implements this REST API must declare its URL templates within the \n\
  Tool Consumer Profile.  A Tool may construct service endpoints from the URL templates in the \n\
  Tool Consumer Profile, but there is a better way to obtain the endpoints.  The Tool may arrange \n\
  for the Tool Consumer to send fully formed endpoints in the launch requests by specifying certain \n\
  variables as launch parameters.  The LTI standard defines the following variables: \n\
   <DL class="references"> \n\
   <DT>LtiLink.custom.uri</DT>\n\
   <DD>The endpoint URI for accessing link-level tool settings</DD>\n\
   <DT>ToolProxyBinding.custom.uri</DT>\n\
   <DD>The endpoint URI for accessing context-level tool settings</DD>\n\
   <DT>ToolProxy.custom.uri</DT>\n\
   <DD>The endpoint URI for accessing system-wide tool settings</DD>\n\
   </DL> \n\
   
 GET.instructions=\
   To get a collection of Tool Settings, the client submits an HTTP GET request to the appropriate \n\
   endpoint in accordance with the following rules:
   
GET?bubble=\
  This query parameter specifies that the response should contain Tool Settings not only from the \n\
  scope targeted by the endpoint URL, but also all higher-level scopes. \n\
  For example, if the request \n\
  is submitted to an LtiLink resource and the <code>bubble</code> parameter is present, \n\
  then the response would include link-level, context-level and system-level \n\
  settings.  \n\
  <p>There are two possible values for the <code>bubble</code> parameter: <code>all</code> and \n\
  <code>distinct</code>.  When <code>bubble=all</code>, \n\
  the server will return all tool settings from all the relevant scopes.  When <code>bubble=distinct</code>, \n\
  the server will return tool settings from all the relevant scopes, but duplicates will be removed.  \n\
  That is to say, if a property with the same name appears in more than one scope, then the response will \n\
  contain the property from the lowest-level scope only; the corresponding property from higher-level scopes \n\
  will be omitted from the response.</p>
  
PUT.instructions=\
  To update a collection of Tool Settings, the client submits an HTTP PUT request to the appropriate \n\
  endpoint in accordance with the following rules:
  
PUT.rules=\
  The submitted JSON document must contain settings only for the particular collection referenced by \
  the endpoint URL.  If a client wishes to submit settings to more than one collection, it must make \
  separate calls to each collection.
  