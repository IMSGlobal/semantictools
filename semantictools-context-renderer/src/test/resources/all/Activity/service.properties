rdfType=uri=http://purl.org/pearson/paf/v1/vocab/core#Activity
mediaType=\
  application/vnd.pearson.paf.v1.assignment+json, \
  application/vnd.pearson.content.v1.envelope+json, \
  application/vnd.pearson.content.v1.metadata+json, \
  application/vnd.pearson.qti.v1p2.asi+xml,\
  text/html, \
  */*
  
enableVersionHistory=true

mediaType.uri.application/vnd.pearson.qti.v1p2.asi+xml=http://www.imsglobal.org/question/qtiv1p2/imsqti_asi_bindv1p2.html

status=Pearson Working Draft
date=6 October 2012

introduction= \
  An <em>Activity</em> is defined to be a collection of interactions that affect the user's \n\
  learning path or outcomes. \n\
  Tests, quizzes and homework assignments are the most common types of activities, but \n\
  watching a video or reading a section of an e-textbook also qualifies as an activity. \n\
  This specification defines a REST API for creating, reading, updating and deleting <em>Activity</em> resources. \n\
  Following common conventions, the API uses a different HTTP verb for each type of operation: POST for  \n\
  create, GET for read, PUT for update and DELETE for delete. 
  
htmlFormatDocumentation=\
  <p>The <code>text/html</code> format conveys the same information as the   \n\
  <code>application/vnd.pearson.content.v1.metadata+json</code> format, except it is rendered as \n\
  user-friendly HTML with microdata markup. The HTML representation contains links to all of the various \n\
  representations of the resource, making it easy to navigate to those representations in a browser.</p>
  
urlTemplates=\
  The URL for an <code>Activity</code> resource has the form:\n\
  <PRE style="margin-left: 2em; margin-bottom: 1em"> \n\
       https://content.api.pearson.com/resources/activities/{guid} \n\
  </PRE> \n\
  where <code>guid</code> is the globally unique identifier for the resource.\n\
  <p>Ordinarily, a client will use content negotiation to specify the format of the resource \n\
  manipulated at this URL.  However, the REST API supports an alternative URL which the \n\
  client may use to access a particular representation by specifying the format in the URL   \n\
  instead of using HTTP headers.  In this case, the client uses a URL of the form: \n\
  <PRE style="margin-left: 2em; margin-bottom: 1em"> \n\
       https://content.api.pearson.com/resources/activities/{guid}/format/{mediaType} \n\
  </PRE> \n\
  where <code>mediaType</code> is the fully-qualified name of the media type. \n\
  As a best practice, the client should encode the <code>mediaType</code> parameter like this: \n\
  <PRE style="margin-left: 2em; margin-bottom: 1em"> \n\
       .../activities/59278264946269590576/format/application%2Fvnd.pearson.content.v1.metadata%2Bjson \n\
  </PRE> \n\
  Nevertheless, in keeping with the robustness principle, the REST server accepts requests where the \n\
  <code>mediaType</code> is not encoded. \n\
  <p>New Activity resources are created within the server by submitting a POST request to the  \n\
  Activity collection endpoint at: \n\
  <PRE style="margin-left: 2em; margin-bottom: 1em"> \n\
       https://content.api.pearson.com/resources/activities \n\
  </PRE> 
  
  
  
POST.response.mediaType=application/vnd.pearson.content.v1.metadata.id+json
POST.processing.rules=\
  <p>For certain media types, the server applies special business logic  \n\
  while processing a POST request.  These special processing instructions are summarized \n\
  in the following table:</p> \n\
  <table class="propertiesTable"> \n\
    <tr><th>Media Type</th><th>Processing Instructions</th></tr> \n\
    <tr> \n\
      <td>application/vnd.pearson.content.v1.envelope+json; body={mediaType}</td> \n\
      <td>The server stores two distinct representations of the Activity: \n\
            <OL> \n\
              <LI> Metadata in the <code>application/vnd.pearson.content.v1.metadata+json</code> format. \n\
              <LI> A concrete representation in the format specified by the <code>body</code> parameter. \n\
            </OL> \n\
          Submitting an Activity in the envelope format is equivalent to submitting two requests \n\
          for the metadata and body separately. \n\
      </td> \n\
    </tr> \n\
    <tr> \n\
      <td>application/vnd.pearson.qti.v1p2.asi+xml</td> \n\
      <td> \n\
          <UL> \n\
            <LI> The server stores the original XML representation of the IMS QTI item as given, \n\
          but it also stores a representation in the  \n\
          <code>application/vnd.pearson.qti.v1.itempresentation+json</code> format. \n\
          The later format omits any resprocessing elements that might be encapsulated \n\
          within the QTI XML definition.  Hence, the later format is suitable for delivery to \n\
          a browser or mobile device. (Students will not be able to discover the correct answer \n\
          by sniffing the http traffic.) \n\
            <LI> Any resprocessing elements contained within the original XML will \n\
            be compiled into a JavaScript function that can be used to process student responses \n\
            at runtime. \n\
          </UL> \n\
      </td> \n\
    </tr> \n\
  </table>
  
 GET.default.mediaType=application/vnd.pearson.content.v1.metadata+json
  